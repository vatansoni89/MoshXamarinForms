Page Types:
  Content
  MasterDetails
  Navigation
  Carousel

Twist:
  If we have same label front and back, backend label will be only visible.



Form:
  Name of lbl given as x:Name="lblHello"
  In constructor We initialize slider after InitializeComponent() as its getting initialized in that method.
    (obj\Debug\netstandard2.0\GreetPage.xaml.g.cs)
  
Binding:
  Source
  Path
  StringFormat

BindingContext:
  We use it in case multiple attributes of a control being binded to single prop change(of another control).

Device.RuntimePlatform: Its used for detecting device os at run time.
  Device.Android
  Device.iOS

Property Element Syntax:
  Setting c# prop using xml element (not attribute)
    exa:
	  C# code:
	    var x = new OnPlatform<Thickness>
            {
                Android = new Thickness(0),
                iOS = new Thickness(0, 20, 0, 0)
            };
            Padding = x;

	  XAML code To set Padding prop of page:
	    <ContentPage.Padding>
			<OnPlatform x:TypeArguments="Thickness" iOS="0,20,0,0" Android="0,40,0,0">
			</OnPlatform>
		</ContentPage.Padding>

XamlCompilationOptions:
  Compile: Include xaml file as part of compilation to catch error at compile time.
  Skip this process for particular xaml file: XamlCompilation(XamlCompilationOptions.Skip)

Common Copy-Paste:
  Padding="0,20,0,0"
  
  

Layout: Code behind overrides xaml design so if we have both then c# wins.
  StackLayout:
    - To position element in single line, vertically or horizontally.
    - By default it fills its parent container (full yellow page.).
	- default spacing between controls is 6 px
	- default orientaion is Vertical
	- nested stacklayout allowed.
	- we set horizontalOptions or VerticalOptions as if we don't then Stacklasyout 
	  background color will spill in that direction.
	-* We can have 'AbsoluteLayout.LayoutBounds="0, 1, 1, 100"' in stack layout (See Absolutelayout exercise 1 n 2) 
  GridLayout:
    - Calculator
	- Photo Album
	- Positioning the elements: Grid.Column, Grid.Row
	- If column or Row span collides than whoever comes later wins.
	- RowSpacing: Space b/w rows.
	- ColumnSpacing: Space b/w columns.
	- View is base class for all visual elements like label, images etc.
  AbsoluteLayout:
    - Anchor elements to edge of screen
	- Overlay elements to top of each other.
	- AbsoluteLayout.LayoutBounds="x,y,widthPx,heightPx"
	- PositionProportional: x,y are propotional (in %)
  RelativeLayout:
    - More powerful than AbsoluteLayout.
	- Overlay elements
	- Apply constraints based on another element
	- More control over position and size of element
	AttachedBindableProp:
	  XConstraint
	  YConstraint
	  WidthConstraint
	  HeightConstraint
	  BoundsConstraint

Images:
  Platform-independent (example background)
    Download using a URI
	Embed in Portable Class Library (PCL)
  Platform-specific (example icon, splash screens)
  UriImageSource
  Aspect
    AspectFill: No distortion (but cropped)
    AspectFit: Default (vertical-horizontal center)
    Fill (distorted img)  
  ActivityIndicator
    IsLoading is prop of image binded to this.
  Build Action
    Embeded resource
  EmbeddedImage:
    - This is a way to embed image in front end (xaml page)
    - Create a class who implements IMarkupExtension, this class prop will be available to xaml as we 
    define local type here (ie xmlns:local="clr-namespace:HelloWorld.MarkupExtensions; assembly=HelloWorld")
    - Use ContentProperty attribute to specify the property being used in xaml (i.e. [ContentProperty("ResourceId")])
  Platform-specific-images
    - http://icons8.com
	Android:
	  Lowercase letters
	  Numbers
	  Underscore
	  Period
	Application-Icon:
	  - Android proj: Keep images in Resources folder which has 3 more folder for image size.
	    iOS proj: Keep images in Resources folder.


Rounded-Corner-Image:
  Install nuget pkg Xam.Plugins.Forms.ImageCircle to each project.
  Create namespace and copy paste fully qualified name from https://github.com/jamesmontemagno/ImageCirclePlugin

Lists:
  If we bind list to a complex type then list will just show type bcz of default ToString() 
  To bind complex data to list:
    ListView
	  ListView.ItemTemplate
	    DataTemplate
		  TextCell
		  ImageCell
		  ViewCell: We can put any element even nested StackLayout
  Custom Cells:
    ListView
	  ListView.ItemTemplate
	    DataTemplate
		  ViewCell
		    StackLayout
			  Image
			    StackLayout
				  Label
				  Label
			  Button

Handling Selections:
  ItemSelected: First time both (Selected>Tapped) will be called on item selection.
    ItemTapped: After first time it will be call always for an already selected item. (and not the ItemSelected)